一、语言相关:php python go c
php:
1、fastcgi cgi区别
2、php-fpm:进程管理器，包含master进程和worker进程，master进程负责接收来自webserver的请求，而worker都内置一个php解释器，执行php代码
3、php二进制安全
二进制安全是指程序不会对其中的数据做任何限制、过滤、或者假设 —— 数据在写入时是什么样的，它被读取时就是什么样。
php存储字符串的时候存储了字符串的长度，所以是二进制安全的
‏‌4、‭‬‪‮‍‪⁠‌‏‌‭php垃圾回收机制：
5、php类的自动加载
‬‪‮‍‪⁠‌‪‬‪‌‌‎‏‪‬‪‌‌‎‏‏‌‭‬‪‮‍‪⁠‌‪‬‪‌‌‎‏‏‌‭‬‪‮‍‪⁠‌‪‬‪‌‌‎‏
二、算法相关:
数据结构:
跳跃表:是一种有序数据结构，通过在每个节点中维持多个指向其它节点的指针，从而达到快速访问节点的目的。
二叉树：
平衡树：

查找算法: 二分查找  
排序算法：快速排序  插入排序 冒泡排序  堆排序  希尔排序
单链表和双链表
超大文件的排序查找
三、数据库:mysql

1、建表时考虑哪些
建整形字段时根据字段需要尽量选择小的 tinyint 一个字节 smallint 2个字节 mediumint 3个字节 int 4个字节 bigint 8个字节
varchar 和char 字段的区别
varchar是变长，更加节省空间，但是需要使用1个或者2个额外的字节记录字符串的长度，如果列的长度小于等于255，则用1个字节，否则使用2个字节，但是varchar 在字段更新时可能会有性能问题，比如导致页分裂
char是定长，适合存储短的字符串或者所有值接近一个长度的字符串，而且对于经常变更的数据，char也更加适合，在存储空间上也更有效率。
blob和text的区别
blob用二进制存储，没有排序规则和字符集，而text用字符方式存储，有排序规则和字符集。
枚举类型enum
可以使用枚举代替有限个字符串类型，但枚举是按照内部存储的整数进行排序，可以按照需要的顺序定义枚举。
日期和时间类型
date time和timestamp
datetime保存的范围更大，用8个字节，而timestamp保存范围小，用4个字节

2、建索引时考虑哪些
为经常需要排序、分组、查询的字段建索引
限制索引的数目
对于需要查询变长字段尽量使用前缀索引
遵循最左前缀原则
尽量选择区分度高的字段建立索引
要根据实际需求出发，建立合适的索引

3、misaim与innodb的区别
innodb:支持事务、行锁、聚簇索引，数据和索引一个文件
misaim:表锁、全文索引、读多写少的项目更合适、count更快，非聚簇索引，索引和数据分开存储

4、b+树：b树和叶子节点有指向下个节点的指针
聚簇索引：聚簇索引是指叶子节点包含一条数据的全部内容

mysql主从同步
主库把数据更改记录到二进制日志，备库将主库上的日志复制到自己的中继日志，备库读取中继日志中的事件，在备库上重放。
线程 ：主库二进制转储线程、备库启动I/O线程 、sql线程

事务的特性：
原子性 隔离性 一致性 持久性
隔离性是通过锁实现的
原子性和持久性是通过redo日志实现的  redo日志是物理日志
一致性是通过undo日志来实现的 undo日志是逻辑日志 undo实现回滚和mvcc
乐观锁、悲观锁:
悲观锁：行锁、表锁
乐观锁：cas mvcc
	* 
SELECT ... LOCK IN SHARE MODE  加s锁
	* 
SELECT ... FOR UPDATE   加x锁




二进制日志是mysql数据库产生的，只记录对数据路的更改操作，用来做数据恢复和主从同步

四、缓存  redis memcache mangodb  
1、redis与memcache的区别
redis支持多种数据类型、支持主从、从3.0开始完善的分布式、支持持久化、虚拟内存
2、持久化方式：内存快照和日志追加
3、分布式方式：虚拟2^14个槽，然后分配到对应的服务器上，当增减服务器时，自动将对应的槽移动到对应服务器上
key的映射方式：crc16%2^14
4、memcache 只支持key=》value形式 ，支持分布式，但是需要客户端来实现，预分配模式

5、redis主从同步过程：
slave服务器主动连接到主服务器
发送sync请求
主服务器生成rdb快照文件
主服务器发送rdb文件到从服务器
从服务器把rdb文件导入数据库

6、内部实现方式
list:ziplist 或者 linkedlist
set : hashtable或 intset 实现
sorted set : ziplist(压缩列表) 或者 skiplist(zest(一个字典和一个跳跃表))
hash : ziplist 或者 hashtable

7、redis淘汰算法：
lru算法 删除一个最近最少访问的key
ttl算法 删除一个最快过期的key
随机淘汰算法

8、redis删除过期时间策略
1、用定时器每隔100毫秒进行一次清理
2、在用户获取数据的时候就行删除

9、redis内核：
用hash table来实现的字典 ，哈希函数用time33算法，异步非阻塞模式，epoll 、kqueue
对列是用双向链表实现的，字典是用哈希函数实现的
key可以用来存储二进制文件
单线程模型

9、memcache
多路复用I/O模型，是一种消息通知模式，memcache使用多线程模式,一个主线程，若干个工作线程
默认是能存储不大于1M的数据，使用slab内存分配算法
slab内存分配算法：
将1M大小的内存块成为一个slab页，将1个slab页划分为n小块（chunk），分配给用户使用，8字节对齐，1.25倍数递增，从80字节开始
使用LRU算法淘汰数据
10、redis分布式锁

五、队列 RabbitMQ kafka

六、服务器 nginx

是一个高性能的http和反向代理服务器
多进程模型：一个master进程和多个worker进程   异步非阻塞的方式来处理请求
也支持多线程模型

优化:
worker_processes 8; nginx进程数，建议和cpu核数相同
use epoll;
worker_connections 102400; 每个进程允许的最多连接数
keepalive_timeout 60;
gzip on
expires       30d;//静态文件缓存
nginx fastcgi模块
异步 german
搜索相关  sphinx elastic search
版本控制  svn git
设计模式
linux
http
Transfer-Encoding 则是用来改变报文格式
Persistent Connection
Content-Encoding
Connection: keep-alive
Connection: close
Content-Length

get和post 区别
htttp和https区别

Http协议无状态协议
常用的HTTP方法有哪些

HTTPS工作原理

常见的HTTP相应状态码
200
301  永久转移
302  临时转移
400  
401  代表未授权
403  禁止访问
404  未找到文件
500  服务器内部错误
503  
tcp
TCP 慢启动的拥塞适应阶段
三次握手四次挥手
一致性哈希:
简单来说，一致性哈希将整个哈希值空间组织成一个虚拟圆环，从0-2^n,整个空间按顺时针方向组织，0和2^n在零点方向重合，下一步对服务器的ip或者关键字进行哈希，这样每台机器就能确定在哈希环上的位置，当数据要存储在服务器上时，对key用相同的哈希函数计算出哈希值h，定位到哈希环上，然后顺时针遇到的第一个服务器就是要数据存储的服务器，这样当有服务器宕机，影响的只是本台服务器到上一台服务器之间的数据。为了解决数据分配不均的问题，引入了虚拟节点的概念，即每台服务器对应多个虚拟节点，每个虚拟节点都放置此服务器节点，虚拟节点一般设置32甚至更大，这样会做到相对均匀的数据分布。
微服务
分布式

zookeeper
分布式锁实现


cookie与session

cookie数据存放在客户的浏览器上，session数据放在服务器上，可以保存在集群，数据库，文件中。
当访问量增多，session可能会有性能问题
单个cookie保存的数据不能超过4k
cookie里面会存放session id,每次请求把这个会话ID发送到服务器
统一登录(sso)：
构建一个统一登录中心，各个应用登陆都通过这个中心进行验证，验证通过后用户中心要生成对应的session信息，然后针对各个应用要生成对应的st，用于验证各个应用是否登录

进程和线程的区别
* 进程是资源分配的最小单位，线程是程序执行的最小单位。
* 进程有自己的独立空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。
* 线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。
* 但是多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。
编码
ascii latin gbk gb2312 cp936 uft8 unicode

反向代理和正向代理
正向代理代理的对象是客户端，反向代理代理的对象是服务端

nginx：
是一个高性能的http和反向代理服务器
多进程模型：一个master进程和多个worker进程   异步非阻塞的方式来处理请求
也支持多线程模型

优化:
worker_processes 8; nginx进程数，建议和cpu核数相同
use epoll;
worker_connections 102400; 每个进程允许的最多连接数
keepalive_timeout 60;
gzip on
expires       30d;//静态文件缓存

nginx负载均衡
1、循环轮询

2、least-connected  最少链接

3、ip-hash

4、weighted

动态资源、静态资源分离简单的概括是：动态文件与静态文件的分离

信号
信号（英语：Signals）是Unix、类Unix以及其他POSIX兼容的操作系统中进程间通讯的一种有限制的方式
* Ctrl-C发送INT信号（SIGINT）；默认情况下，这会导致进程终止。
* Ctrl-Z发送TSTP信号（SIGTSTP）；默认情况下，这会导致进程挂起。
* Ctrl-\发送QUIT信号（SIGQUIT）；默认情况下，这会导致进程终止并且将内存中的信息转储到硬盘（核心转储）。
linux进程间通信
管道
信号
消息队列
共享内存
信号量：用于控制一个仅支持有限个用户的共享进程
套接口

正则表达式
模型：
nginx：多进程异步非阻塞 ——php-fpm多进程阻塞模型—redis单进程异步非阻塞模型
memcached多线程  mysql多线程

CAP:
一致性 可用性 分区容错性